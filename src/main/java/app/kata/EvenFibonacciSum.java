package main.java.app.kata;

public class EvenFibonacciSum {
    /*
    Each new term in the Fibonacci sequence is generated by adding the previous two terms.
    By starting with '1' and '2', the first 10 terms will be:
    1,2,3,5,8,13,21,34,55,89,...
    By considering the terms in the Fibonacci sequence whose values do not exceed four million,
    find the sum of the even-valued terms.
    */

    /*
    public int evenFibonacci(int integer){
        return (fibonacci(integer) % 2 == 0 ? integer : fibonacci(integer));
    }

    public int fibonacci(int integer) {
        // obs! starts on sequence '0'!
        // base
        if (integer <= 1) {
            return integer;
        }
        // recursion case
        return fibonacci(integer - 1) + fibonacci(integer - 2);
    } */

    public int recursiveEvenFibonacciSum(int limit) {
        return helperSum(1, 2, 0, limit);
    }

    public int helperSum(int first, int second, int sum, int max){
        if (first > max){
            return sum;
        }
        /* or just use a tertiary(?)
        int newSum = 0;
        if (first % 2 == 0) {
            newSum = sum + first;
        } else {
            newSum = sum;
        }
        */
        int newSum = (first % 2 == 0) ? sum + first : sum;
        return helperSum(second, first + second, newSum, max);
    }

    public int evenFibonacci(int count) {
        int sum = 0;
        int first = 1;
        int second = 2;

        while (first <= count) {
            if (first % 2 == 0) {
                sum += first;
            }
            // iterative fibonacci
            int next = first + second;
            first = second;
            second = next;
        }
        return sum;
    }
}
